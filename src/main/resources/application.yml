#  --------------------------------------------------------
#  Karnak Application Profiles
#  --------------------------------------------------------
name: KARNAK-Profile
#environment: LOCAL
karnakadmin: ${KARNAK_ADMIN:admin}
karnakpassword: ${KARNAK_PASSWORD:admin}

# TODO TELIMA-289: config pseudo service server url + port + etc.. + update readme + set paths to retrieve data depending
# on pseudo service used

# - Logs
logging:
  level:
    org:
      springframework: INFO
      karnak: INFO
    com:
      vaadin:
        flow:
          server:
            communication:
              # Suppress WARN  c.v.f.s.c.ReturnChannelHandler - Ignoring update for disabled return channel
              rpc:
                MapSyncRpcHandler: ERROR
              ReturnChannelHandler: ERROR
server:
  port: 8081
  servlet:
    session:
      persistent: false
  forward-headers-strategy: NATIVE
spring:
  application:
    name: karnak
    version: '@project.version@'
  cloud:
    config:
      discovery:
        enabled: false
#    Currently no cs configured in docker deploy/ vault
#      fail-fast: true
      name: ${spring.application.name}
      label: ${ENVIRONMENT}
#      uri: ${CONFIGSERVER_URI}
#  config:
#    import: 'configserver:'
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/db.changelog-master.yaml
  profiles:
    active: '@activatedProperties@,docker,redis, eureka'
  datasource:
    password: ${DB_PASSWORD:5!KAnN@%98%d}
    url: 'jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5433}/${DB_NAME:karnak}'
    username: ${DB_USER:karnak}
    hikari:
      leak-detection-threshold: 0
      minimum-idle: 5
      maximum-pool-size: 10
      connection-timeout: 10000
      idle-timeout: 20000
      max-lifetime: 1800000
  mustache:
    check-template-location: false
  jpa:
    hibernate:
      # First time to create the db the value must be: create
      ddl-auto: none
    generate-ddl: false
    show-sql: false
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        #    In order to still use the unique hibernate_sequence, otherwise we should create a sequence table_name_seq for
        #  each tables
        id:
          db_structure_naming_strategy: legacy
        temp:
          use_jdbc_metadata_defaults: false
      jdbc:
        lob:
          non_contextual_creation: true

# - Info
info:
  component: Karnak
  app:
    name: Karnak
    description: Karnak
  environment: ${ENVIRONMENT}
  tags:
    eureka.datacenter: ${eureka.datacenter}
    eureka.instance-id: ${eureka.instance.instance-id}
management:
  endpoint:
    health:
      show-details: always
    # https://github.com/spring-projects/spring-boot/issues/20509
    env:
      post.enabled: true
    #issue with spring cloud Hoxton.SR10 and sup
    restart:
      enabled: false
    pause:
      enabled: false
    shutdown:
      enabled: false
  endpoints:
    web:
      exposure:
        include: "*"
    enabled-by-default: true
  health:
    config:
      enabled: false
  server:
    port: ${SERVER_MANAGEMENT_PORT:18089}
  info:
    env:
      enabled: true #disabled by default in springboot 2.6
  metrics:
    distribution:
      percentiles-histogram:
        '[http.server.requests]': true
      percentiles:
        '[http.server.requests]': 0.5, 0.9, 0.95, 0.99, 0.999
      slo:
        '[http.server.requests]': 50ms, 150ms, 250ms, 400ms
    tags:
      application: ${spring.application.name}
      instance: ${eureka.instance.instance-id}
      team: ${application.team}
  prometheus:
    metrics:
      export:
        enabled: true

monitoring:
  # Maximum of sop instance sent for the monitoring
  max-history: 300000

mail:
  sender: no-reply@hcuge.ch
