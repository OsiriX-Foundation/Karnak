<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- Pom Parent -->
  <parent>
    <groupId>ch.hcuge.springcloud</groupId>
    <artifactId>spring-cloud-core-dependencies</artifactId>
    <version>2.7.7-2021.0.5-1.0</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <artifactId>karnak</artifactId>
  <groupId>org.karnak</groupId>
  <name>${project.artifactId}</name>
  <version>${revision}</version>
  <description>Karnak</description>

  <licenses>
    <license>
      <distribution>repo</distribution>
      <name>Eclipse Public License v2.0</name>
      <url>http://www.eclipse.org/legal/epl-v20.html</url>
    </license>
  </licenses>

  <!-- Packaging -->
  <packaging>jar</packaging>

  <!-- Properties -->
  <properties>
    <revision>SNAPSHOT</revision>
    <java.version>17</java.version>
    <enforcer.jdk-version>[${java.version},)</enforcer.jdk-version>
    <enforcer.maven-version>[3.3.0,)</enforcer.maven-version>
    <liquibase.version>4.3.5</liquibase.version>
<!--    <javax.el.version>3.0.0</javax.el.version>-->
    <javax.mail.version>1.6.2</javax.mail.version>
    <vaadin.version>21.0.9</vaadin.version>
    <weasis-dicom-tools.version>5.29.0.2</weasis-dicom-tools.version>
<!--    <weasis.opencv.native.version>4.6.0-dcm</weasis.opencv.native.version>-->
    <h2.version>1.4.200</h2.version>
    <org.json.version>20211205</org.json.version>
    <opencsv.version>5.5.2</opencsv.version>
  </properties>

  <!-- Dependency Management -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-bom</artifactId>
        <version>${vaadin.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>${springboot.version}</version>
      </dependency>
      <dependency>
        <artifactId>javax.servlet-api</artifactId>
        <groupId>javax.servlet</groupId>
        <scope>provided</scope>
        <version>3.1.0</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!-- Distribution management for releases/snapshots -->
  <distributionManagement>
    <repository>
      <id>dsi-releases</id>
      <name>Nexus3-hug - release</name>
      <url>http://nxrm.hcuge.ch:8091/repository/maven-releases/</url>
    </repository>
    <snapshotRepository>
      <id>dsi-snapshots</id>
      <name>Nexus3-hug - snapshot</name>
      <url>http://nxrm.hcuge.ch:8091/repository/maven-snapshots/</url>
    </snapshotRepository>
  </distributionManagement>

  <!-- Repositories -->
  <repositories>
    <repository>
      <id>HUG_Nexus3</id>
      <name>Nexus3-hug</name>
      <url>https://nxrm.hisaas.hcuge.ch/repository/maven-public/</url>
      <layout>default</layout>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </snapshots>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </releases>
    </repository>
    <repository>
      <id>mvn-repo-master</id>
      <url>https://raw.github.com/nroduit/mvn-repo/master/</url>
    </repository>
    <repository>
      <id>www.dcm4che.org</id>
      <name>dcm4che Repository</name>
      <url>https://www.dcm4che.org/maven2</url>
    </repository>
  </repositories>

  <!-- Dependencies -->
  <dependencies>

    <!-- =========== -->
    <!-- Springboot  -->
    <!-- =========== -->

    <dependency>
      <artifactId>spring-boot-starter-web</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-mail</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-cache</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>

    <!-- jpa, crud repository -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Oauth2 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-client</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.hcuge.springcloud</groupId>
      <artifactId>spring-cloud-security</artifactId>
<!--      <version>${spring-cloud-parent.version}</version>-->
    </dependency>

    <!-- Eureka -->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-netflix-ribbon</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.netflix.ribbon</groupId>
          <artifactId>ribbon-eureka</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>ch.hcuge.springcloud</groupId>
      <artifactId>spring-cloud-eureka-plugins</artifactId>
<!--      <version>${spring-cloud-eureka-plugins.version}</version>-->
    </dependency>

    <!-- security -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.hcuge.springcloud</groupId>
      <artifactId>spring-cloud-security</artifactId>
<!--      <version>${spring-cloud-parent.version}</version>-->
    </dependency>

    <!-- ====== -->
    <!-- Lombok -->
    <!-- ====== -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- ====== -->
    <!-- Weasis -->
    <!-- ====== -->
    <!-- Dicom-tools-->
    <dependency>
      <artifactId>weasis-dicom-tools</artifactId>
      <groupId>org.weasis</groupId>
      <version>${weasis-dicom-tools.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-log4j12</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- ========= -->
    <!-- Liquibase -->
    <!-- ========= -->
    <dependency>
      <artifactId>liquibase-maven-plugin</artifactId>
      <groupId>org.liquibase</groupId>
      <version>${liquibase.version}</version>
    </dependency>

    <!-- ========= -->
    <!-- Open Csv  -->
    <!-- ========= -->
    <dependency>
      <groupId>com.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>${opencsv.version}</version>
    </dependency>

<!--    <dependency>-->
<!--      <artifactId>cache-api</artifactId>-->
<!--      <groupId>javax.cache</groupId>-->
<!--      <version>1.1.1</version>-->
<!--    </dependency>-->

    <dependency>
      <artifactId>json</artifactId>
      <groupId>org.json</groupId>
      <version>${org.json.version}</version>
    </dependency>

    <dependency>
      <artifactId>gson</artifactId>
      <groupId>com.google.code.gson</groupId>
      <version>2.8.6</version>
    </dependency>

<!--    <dependency>-->
<!--      <artifactId>javax.el</artifactId>-->
<!--      <groupId>org.glassfish</groupId>-->
<!--      <version>${javax.el.version}</version>-->
<!--    </dependency>-->

<!--    <dependency>-->
<!--      <artifactId>weasis-dicom-tools</artifactId>-->
<!--      <exclusions>-->
<!--        <exclusion>-->
<!--          <artifactId>slf4j-log4j12</artifactId>-->
<!--          <groupId>org.slf4j</groupId>-->
<!--        </exclusion>-->
<!--        <exclusion>-->
<!--          <artifactId>libopencv_java</artifactId>-->
<!--          <groupId>org.weasis.thirdparty.org.opencv</groupId>-->
<!--        </exclusion>-->
<!--        <exclusion>-->
<!--          <artifactId>opencv_java</artifactId>-->
<!--          <groupId>org.weasis.thirdparty.org.opencv</groupId>-->
<!--        </exclusion>-->
<!--      </exclusions>-->
<!--      <groupId>org.weasis</groupId>-->
<!--      <version>${weasis-dicom-tools.version}</version>-->
<!--    </dependency>-->

    <!-- ========= -->
    <!--    Mail   -->
    <!-- ========= -->
    <dependency>
      <artifactId>javax.mail</artifactId>
      <groupId>com.sun.mail</groupId>
      <version>${javax.mail.version}</version>
    </dependency>

    <!-- ============ -->
    <!--  Validation  -->
    <!-- ============ -->
    <dependency>
      <artifactId>hibernate-validator</artifactId>
      <groupId>org.hibernate.validator</groupId>
    </dependency>

    <dependency>
      <artifactId>validation-api</artifactId>
      <groupId>javax.validation</groupId>
    </dependency>

    <!-- ============ -->
    <!--  Postgresql  -->
    <!-- ============ -->
    <dependency>
      <artifactId>postgresql</artifactId>
      <groupId>org.postgresql</groupId>
      <scope>runtime</scope>
    </dependency>

    <!-- ========= -->
    <!--   Vaadin  -->
    <!-- ========= -->
    <!-- Vaadin Spring -->
    <dependency>
      <artifactId>vaadin-spring-boot-starter</artifactId>
      <exclusions>
        <!-- Excluding so that webjars are not included. -->
        <exclusion>
          <artifactId>vaadin-core</artifactId>
          <groupId>com.vaadin</groupId>
        </exclusion>
        <exclusion>
          <artifactId>spring-boot-starter-web</artifactId>
          <groupId>org.springframework.boot</groupId>
        </exclusion>
      </exclusions>
      <groupId>com.vaadin</groupId>
      <version>${vaadin.version}</version>
    </dependency>
    <dependency>
      <groupId>com.vaadin</groupId>
      <artifactId>vaadin</artifactId>
      <!-- Replace artifactId with vaadin-core to use only free components -->
      <exclusions>
        <!-- Webjars are only needed when running in Vaadin 13 compatibility mode -->
        <exclusion>
          <artifactId>*</artifactId>
          <groupId>com.vaadin.webjar</groupId>
        </exclusion>
        <exclusion>
          <artifactId>*</artifactId>
          <groupId>org.webjars.bowergithub.insites</groupId>
        </exclusion>
        <exclusion>
          <artifactId>*</artifactId>
          <groupId>org.webjars.bowergithub.polymer</groupId>
        </exclusion>
        <exclusion>
          <artifactId>*</artifactId>
          <groupId>org.webjars.bowergithub.polymerelements</groupId>
        </exclusion>
        <exclusion>
          <artifactId>*</artifactId>
          <groupId>org.webjars.bowergithub.vaadin</groupId>
        </exclusion>
        <exclusion>
          <artifactId>*</artifactId>
          <groupId>org.webjars.bowergithub.webcomponents</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <artifactId>vaadin-confirm-dialog-flow</artifactId>
      <groupId>com.vaadin</groupId>
    </dependency>
    <dependency>
      <groupId>org.vaadin.artur</groupId>
      <artifactId>spring-data-provider</artifactId>
      <version>2.1.0</version>
    </dependency>
    <!-- Vaadin - Addons -->
    <dependency>
      <artifactId>iron-icons</artifactId>
      <groupId>com.flowingcode.addons</groupId>
      <version>2.0.1</version>
    </dependency>
    <dependency>
      <artifactId>multiselect-combo-box-flow</artifactId>
      <groupId>org.vaadin.gatanaso</groupId>
      <version>3.0.2</version> <!-- use appropriate version -->
    </dependency>
    <dependency>
      <artifactId>vaadin-checkbox-flow</artifactId>
      <groupId>com.vaadin</groupId>
      <version>${vaadin.version}</version>
    </dependency>
    <dependency>
      <artifactId>togglebutton</artifactId>
      <groupId>com.vaadin.componentfactory</groupId>
      <version>1.0.1</version>
    </dependency>
    <dependency>
      <groupId>org.vaadin.klaudeta</groupId>
      <artifactId>grid-pagination</artifactId>
      <version>2.0.10</version>
    </dependency>

    <!-- ========== -->
    <!--   Jackson  -->
    <!-- ========== -->
    <dependency>
      <artifactId>jackson-annotations</artifactId>
      <groupId>com.fasterxml.jackson.core</groupId>
    </dependency>
    <dependency>
      <artifactId>jackson-databind</artifactId>
      <groupId>com.fasterxml.jackson.core</groupId>
    </dependency>
    <dependency>
      <artifactId>jackson-module-jaxb-annotations</artifactId>
      <groupId>com.fasterxml.jackson.module</groupId>
    </dependency>
    <!-- Jackson Xml -->
    <dependency>
      <artifactId>jackson-dataformat-xml</artifactId>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
    </dependency>

    <!-- Tests -->
    <dependency>
      <artifactId>janino</artifactId>
      <groupId>org.codehaus.janino</groupId>
    </dependency>

    <!-- Tests -->
    <dependency>
      <artifactId>spring-boot-starter-test</artifactId>
      <groupId>org.springframework.boot</groupId>
      <scope>test</scope>
    </dependency>

    <!-- Mockito inline -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- DB H2 for tests -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>${h2.version}</version>
    </dependency>

  </dependencies>

  <!-- Build-->
  <build>
    <defaultGoal>spring-boot:run</defaultGoal>
    <plugins>
<!--      <plugin>-->
<!--        <groupId>org.springframework.boot</groupId>-->
<!--        <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--        <configuration>-->
<!--          <jvmArguments>-->
<!--            -Djava.library.path="${java.io.tmpdir}/dicom-opencv-${weasis.opencv.native.version}"-->
<!--          </jvmArguments>-->
<!--        </configuration>-->
<!--        <executions>-->
<!--          <execution>-->
<!--            <goals>-->
<!--              <goal>repackage</goal>-->
<!--            </goals>-->
<!--          </execution>-->
<!--        </executions>-->
<!--      </plugin>-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>min-requirement</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>${enforcer.maven-version}</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>${enforcer.jdk-version}</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Take care of synchronizing java dependencies and imports in package.json and main.js files. It also creates webpack.config.js
        if not exists yet. -->
      <plugin>
        <artifactId>vaadin-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>prepare-frontend</goal>
            </goals>
          </execution>
        </executions>
        <groupId>com.vaadin</groupId>
        <version>${vaadin.version}</version>
      </plugin>

<!--      <plugin>-->
<!--        <groupId>org.jacoco</groupId>-->
<!--        <artifactId>jacoco-maven-plugin</artifactId>-->
<!--        <configuration>-->
<!--          <excludes>-->
<!--            <exclude>**/org/karnak/frontend/**/*</exclude>-->
<!--          </excludes>-->
<!--        </configuration>-->
<!--      </plugin>-->

<!--      <plugin>-->
<!--        <artifactId>maven-dependency-plugin</artifactId>-->
<!--        <configuration>-->
<!--          <artifactItems>-->
<!--            <artifactItem>-->
<!--              <artifactId>libopencv_java</artifactId>-->
<!--              <classifier>linux-x86-64</classifier>-->
<!--              <destFileName>libopencv_java.so</destFileName>-->
<!--              <groupId>org.weasis.thirdparty.org.opencv</groupId>-->
<!--              <outputDirectory>${project.build.directory}/native-lib/lib/linux-x86-64-->
<!--              </outputDirectory>-->
<!--              <type>so</type>-->
<!--              <version>${weasis.opencv.native.version}</version>-->
<!--            </artifactItem>-->
<!--            <artifactItem>-->
<!--              <artifactId>libopencv_java</artifactId>-->
<!--              <classifier>linux-aarch64</classifier>-->
<!--              <destFileName>libopencv_java.so</destFileName>-->
<!--              <groupId>org.weasis.thirdparty.org.opencv</groupId>-->
<!--              <outputDirectory>${project.build.directory}/native-lib/lib/linux-aarch64-->
<!--              </outputDirectory>-->
<!--              <type>so</type>-->
<!--              <version>${weasis.opencv.native.version}</version>-->
<!--            </artifactItem>-->
<!--            <artifactItem>-->
<!--              <artifactId>libopencv_java</artifactId>-->
<!--              <classifier>linux-armv7a</classifier>-->
<!--              <destFileName>libopencv_java.so</destFileName>-->
<!--              <groupId>org.weasis.thirdparty.org.opencv</groupId>-->
<!--              <outputDirectory>${project.build.directory}/native-lib/lib/linux-armv7a-->
<!--              </outputDirectory>-->
<!--              <type>so</type>-->
<!--              <version>${weasis.opencv.native.version}</version>-->
<!--            </artifactItem>-->
<!--            <artifactItem>-->
<!--              <artifactId>libopencv_java</artifactId>-->
<!--              <classifier>macosx-x86-64</classifier>-->
<!--              <destFileName>libopencv_java.dylib</destFileName>-->
<!--              <groupId>org.weasis.thirdparty.org.opencv</groupId>-->
<!--              <outputDirectory>${project.build.directory}/native-lib/lib/macosx-x86-64-->
<!--              </outputDirectory>-->
<!--              <type>dylib</type>-->
<!--              <version>${weasis.opencv.native.version}</version>-->
<!--            </artifactItem>-->
<!--            <artifactItem>-->
<!--              <artifactId>opencv_java</artifactId>-->
<!--              <classifier>windows-x86-64</classifier>-->
<!--              <destFileName>opencv_java.dll</destFileName>-->
<!--              <groupId>org.weasis.thirdparty.org.opencv</groupId>-->
<!--              <outputDirectory>${project.build.directory}/native-lib/lib/windows-x86-64-->
<!--              </outputDirectory>-->
<!--              <type>dll</type>-->
<!--              <version>${weasis.opencv.native.version}</version>-->
<!--            </artifactItem>-->
<!--          </artifactItems>-->
<!--          <outputDirectory>${project.build.directory}</outputDirectory>-->
<!--        </configuration>-->
<!--        <executions>-->
<!--          <execution>-->
<!--            <goals>-->
<!--              <goal>copy</goal>-->
<!--            </goals>-->
<!--            <id>copy</id>-->
<!--            <phase>generate-resources</phase>-->
<!--          </execution>-->
<!--        </executions>-->
<!--        <groupId>org.apache.maven.plugins</groupId>-->
<!--        <version>3.2.0</version>-->
<!--      </plugin>-->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <image>
            <env>
              <BPE_DELIM_LD_LIBRARY_PATH>:</BPE_DELIM_LD_LIBRARY_PATH>
              <BPE_APPEND_LD_LIBRARY_PATH>/var/lib/native_lib:/var/lib/native_lib/native_lib</BPE_APPEND_LD_LIBRARY_PATH>
            </env>
          </image>
        </configuration>
      </plugin>
    </plugins>
<!--    <resources>-->
<!--      <resource>-->
<!--        <directory>src/main/resources</directory>-->
<!--        <filtering>true</filtering>-->
<!--      </resource>-->
<!--      <resource>-->
<!--        <directory>${project.build.directory}/native-lib</directory>-->
<!--      </resource>-->
<!--    </resources>-->
  </build>


  <!-- Profiles -->
  <profiles>
    <profile>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>

      <!-- Production mode is activated using -Pproduction -->
      <id>production</id>
      <properties>
        <vaadin.productionMode>true</vaadin.productionMode>
      </properties>

      <dependencies>
        <dependency>
          <artifactId>flow-server-production-mode</artifactId>
          <groupId>com.vaadin</groupId>
        </dependency>
      </dependencies>

      <build>
        <plugins>
          <plugin>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-maven-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>build-frontend</goal>
                </goals>
                <phase>compile</phase>
              </execution>
            </executions>
            <configuration>
              <pnpmEnable>true</pnpmEnable>
              <!--              <nodeVersion>${node.version}</nodeVersion>-->
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>**/org/karnak/frontend/**/*</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
<!--        <resources>-->
<!--          <resource>-->
<!--            <directory>src/main/resources</directory>-->
<!--            <filtering>true</filtering>-->
<!--          </resource>-->
<!--          <resource>-->
<!--            <directory>${project.basedir}/packages</directory>-->
<!--          </resource>-->
<!--        </resources>-->
<!--        <testResources>-->
<!--          <testResource>-->
<!--            <directory>${project.basedir}/src/test/resources</directory>-->
<!--            <filtering>true</filtering>-->
<!--          </testResource>-->
<!--        </testResources>-->
      </build>

<!--      <build>-->
<!--        <plugins>-->
<!--          <plugin>-->
<!--            <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--            <configuration>-->
<!--              <jvmArguments>-Dvaadin.productionMode</jvmArguments>-->
<!--              <layers>-->
<!--                <enabled>true</enabled>-->
<!--              </layers>-->
<!--            </configuration>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--          </plugin>-->
<!--          <plugin>-->
<!--            <artifactId>vaadin-maven-plugin</artifactId>-->
<!--            <configuration>-->
<!--              <pnpmEnable>true</pnpmEnable>-->
<!--            </configuration>-->
<!--            <executions>-->
<!--              <execution>-->
<!--                <goals>-->
<!--                  <goal>build-frontend</goal>-->
<!--                </goals>-->
<!--                <phase>compile</phase>-->
<!--              </execution>-->
<!--            </executions>-->
<!--            <groupId>com.vaadin</groupId>-->
<!--          </plugin>-->
<!--        </plugins>-->
<!--      </build>-->

    </profile>
  </profiles>

</project>
